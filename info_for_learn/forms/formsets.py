# Создать набор форм, связанный с моделью, можно вызовом функции 
# modelformset_factory, объявленной в модуле django.forms.models. В 
# качестве единственного обя­зательного параметра ей передается класс 
# нужной модели:
from django.forms.models import modelformset_factory
from page.models import Category

CategoryFormset = modelformset_factory(Category)
# Так мы создаем набор форм для работы со списком категорий.

# Помимо обязательного параметра, функция modelformset_factory 
# принимает ряд именованных необязательных. Они включают в себя параметры 
# fields, exclude, widgets, labels, help_texts и error_messages, 
# соответствующие одноименным свой­ствам класса Mеtа форм, связанных с 
# моделями
CategoryFormset = modelformset_factory(Category,
    labels = { "name": "Название"},
    help_texts = { "name": "Должно быть уникальным"})
# Здесь мы задаем для поля названия категории надпись и справочный текст.

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Параметры функции modelformset_factory, специфичные для наборов форм

form 
# Задает класс формы, которая будет использована для ввода данных. 
# Значение по умолчанию - None (т.е. форма будет генерироваться 
# автоматически)

max_num 
# Задает максимальное количество форм в наборе. Значение по умолчанию 
# - None (1000 форм, чего хватит в большинстве случаев)

extra 
# Задает максимальное количество выводимых пустых форм для создания 
# новых записей. Значение по умолчанию - 1

validate_max 
# Если True, превышение указанного в параметре max_num количества форм 
# вызывает ошибку ввода. Значение по умолчанию - False

Вот пример:
class CategoryForm(forms.ModelForm):
    class Meta:
        model = Category
        name = forms.CharField(label = "Название",
            help_text = "Должно быть уникальным")
# Здесь мы создаем форму для ввода категорий.

CategoryFormset = modelformset_factory(Category, form = CategoryForm,
            max_num = 10, validate_max = True)
# А здесь - набор форм, указав для него только что созданную форму и 
# ограничив число выводимых форм десятью.

# Но что же возвращает функция modelformset_factory в качестве результата? 
# Нет, не объект набора форм, а представляющий его класс. На основе 
# которого нам самим придется создать объект:
formset = CategoryFormset()


# Класс набора форм является потомком класса вaseModelFormset, объявленного 
# в томже модуле django.forms.models. Конструктор этого класса поддерживает 
# необязательный параметр queryset, с помощью которого мы можем указать набор 
# записей, из которого будут взяты данные для заполнения форм. Этот набор 
# записей будет использован вместо сформированного на основе указанной нами в 
# вызове функции modelformset_factory модели:

formset = CategoryFoпnset(queryset = Category.objects.order_by("-name"))
# Здесь мы задаем в качестве набора записей список категорий, отсортированный 
# по их названиям в обратном порядке.


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Вывод наборов форм

# Базовый класс набора форм вaseModelFoпnSet поддерживает методы as_tаblе, 
# as_р и as_ul. Так что в самом простом случае мы можем просто вызвать один из 
# этих методов в коде шаблона.
# Но здесь есть один нюанс. Набор форм должен быть помещен внутри единого для 
# всех входящих в него форм тега <form>:
<form method = "post" action = "">
    {% csrf_token %}
    {{ formset.as_p }}
    <input type = "submit" vаluе = "Сохранить">
</form>
# Так мы выводим набор форм, отформатированный в виде набора абзацев. 
# (Здесь предполагается, что набор форм хранится в переменной контекста foпnset.)

# Набор форм можно рассматривать как список входящих в его состав форм. Эти 
# формы мы можем обработать и вывести по очереди, в цикле.
# Однако здесь возникает другой нюанс. Если мы выводим входящие в состав набора
# формы по отдельности, то в обязательном порядке должны поместить в тег <form> 
# еще и особую служебную форму набора. Эта служебная форма включает в свой 
# состав скрытые поля НТМL, содержащие служебные данные, и хранится в свойстве
# management_form класса BaseModelFormSet:
<form method = "post" action = "">
    {% csrf_token %}
    {{ formset.management_form }}
    {% for form in formset %}
        <div class = "form">{{ form.as_p }}</div>
    {{ endfor }}
    <input type = "suЬmit" vаluе = "Сохранить">
</form>
# Здесь мы заключаем каждую форму в блок.


# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Сохранение введенных в набор форм данных

formset = CategoryFormset(request.POST, request.FILES)

if formset.is_valid():
    formset. save ()
# для сохранения данных из набора форм мы можем использовать те же приемы, 
# что и для сохранения данных, занесенных в обычную связанную с мо­делью 
# форму.

