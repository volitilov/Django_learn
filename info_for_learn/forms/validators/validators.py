from django.core.exceptions import ValidationError

# Мы мо­жем написать свои валидаторы, если хотим выполнять дополнительную 
# проверку заносимых в форму значений. Это совсем несложно.
# Вот объявление простого валидатора, который проверяет, не является ли 
# заданное значение цены товара отрицательным:

def validate_positive(value):
    if value < О:
        raise ValidationError('Значение цены должно быть положительным!', 
                                code="invalid")
# Как видим, конструктор класса ValidationError принимает обязательный 
# параметр с описанием возникшей ошибки и необязательный (но 
# настоятельно рекомендуе­мый к заданию) параметр code, задающий код 
# ошибки

# Конструкторы классов полей в формах поддерживают свойство validators. 
# Его значением должен быть список функций-валидаторов, которые будут 
# дополнитель­но применены к данному полю:

class GoodForm(forms.ModelForm):
    class Meta:
        model = Good
    price = forms.FloatField(label="Цена", validators=[validate_positive])


# Класс Foпn, от которого так или иначе наследуются все классы форм, 
# поддерживает не принимающий параметров метод clean. Он преобразует 
# введенные в форму дан­ные к нужному типу, заполняет преобразованными 
# данными словарь, что хранится в свойстве cleaned_data, и возвращает 
# его в качестве ре­зультата.

# Переопределенный в потомке метод clean - идеальное место для выполнения 
# про­верки, которая затрагивает сразу несколько полей формы:

class GoodFoпn(foпns.ModelForm):
    def clean(self):
        cleaned_data = super(GoodForm, self).clean()
        if cleaned_data["price"] == cleaned_data["new_price"]:
            raise ValidationError("Цена с учетом скидки должна быть меньше!",
                code="invalid")
        return cleaned_data
# Здесь мы сначала вызываем унаследованный от родителя метод clean, чтобы 
# полу­чить словарь с уже преобразованными данными. Далее мы проверяем 
# корректность этих данных и, если нужно, генерируем исключение 
# ValidationError. И не забыва­ем вернуть словарь с данными в случае 
# успешной проверки.