from django.core.paginator import Paginator

# Конструктор класса Paginator принимает следующие обязательные 
# параметры:

# - перечень позиций, которые будут разбиваться на страницы. Им может 
#   стать лю­бой список Python или объект класса Queryset Django, 
#   представляющий список записей модели

# - максимальное количество позиций на странице в виде целого числа.


# Помимо этого, мы можем передать конструктору еще два необязательных 
# имено­ванных параметра:

orphans 
# минимальное количество позиций, допустимое на последней 
# страни­це. Если окажется так, что на последней странице 
# присутствует меньшее коли­чество позиций, чем предписано 
# данным параметром, эти позиции будут разме­щены на 
# предпоследней странице, которая, таким образом, 
# станет больше. Значение по умолчанию - О (т.е. на 
# последней странице может присутствовать сколько угодно 
# позиций, даже одна)

allow_empty_first_page
# имеет смысл, когда переданный конструктору список позиций 
# пуст. Если значение данного параметра равно тrue, при обращении
# к первой странице мы получим эту страницу, разумеется, пустую. 
# Если же зна­чение параметра равно False при обращении к первой 
# странице будет сгенери­ровано исключение EmptyPage


pag = Paginator(goods, 10, orphans = 2)

# Класс Paginator поддерживает следующие полезные нам свойства

count # возвращает общее количество позиций в списке:
nшn_pages # возвращает количество страниц;

page_range 
# возвращает список, содержащий номера полученных страниц, 
# на­чиная с единицы (вида [1, 2, 3 ... ]).

# Например:
page_count = pag.nшn_pages


# Кроме того, класс Paginator поддерживает метод page.
# Этот метод принимает в каче­стве единственного параметра номер 
# страницы (нумерация страниц начинается с единицы) в виде целого 
# числа и возвращает объект класса Page, который, в свою очередь, 
# представляет список позиций, находящихся на странице с указанным
# номером:
goods = pag.page(page_num)


# Метод page может генерировать три исключения, которые нам придется 
# обрабаты­вать. Все эти исключения объявлены в модуле 
# django.core.paginator:

InvalidPage 
# возникает в случае некорректного задания номера страницы (на­пример, 
# если он представляет собой число с плавающей точкой или строку) или 
# при обращении к несуществующей странице (типичный случай - список 
# разбит на десять страниц, а выполняется обращение к одиннадцатой);

PageNotAninteger
# возникает в случае некорректного задания номера страницы;

EmptyPage
# возникает в случае обращения к несуществующей странице.

# Классы исключений PageNotAninteger и EmptyPage являются потомками 
# класса InvalidPage. Так что мы можем обрабатывать либо InvalidPage, 
# либо PageNotAninteger и EmptyPage:
from django.core .paginator import InvalidPage
...
try:
    goods = pag.page(page_num)
except InvalidPage:
    goods = pag.page(l)

# Класс Page поддерживает два полезных свойства:
number # возвращает номер данной страницы;
paginator # возвращает объект класса Paginator, с применением которого 
          # была создана эта страница.

