# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Использование модели User

# класс User, объявленный в модуле django.contrib.auth.models 
# и предназначенный для хранения данных о зарегистрированном 
# пользовате­ле, на самом деле представляет собой модель. Так что, 
# если нам понадобится при­вязать какие-либо сущности к определенному 
# пользователю, мы с легкостью сдела­ем это, создав связь между 
# моделями:

from django.contrib.auth.models import User

class вiog(models.Model):
    user = models.ForeignКey(User)
# Так мы создаем связь между моделью Blog, хранящей статьи блога, и 
# моделью User.

# Благодаря этому мы теперь сможем привязать каждую статью блога к 
# конкретному пользователю:

class BlogUpdate(TemplateView):
    def get(self, request, *args, **kwargs):
        blog = Blog.objects.get(pk = self.kwargs["blog_id"])
        if Ьlog.user == request.user: pass
        else:
            return redirect("login")
# Здесь мы проверяем, тот ли пользователь, что в данный момент вошел 
# на сайт, соз­дал эту статью, перед тем как запустить процесс ее правки.
