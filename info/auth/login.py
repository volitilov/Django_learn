# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Реализация входа на сайт

# Django включает в свой состав уже готовую функцию-контроллер, 
# реализующую вход на сайт. Эта функция сама выводит на экран 
# страницу с формой входа, сама проверяет правильность введенных 
# в форму данных, сама ищет в списке пользова­телей того, чьи имя 
# и пароль указал пользователь, сама выполняет вход или, напро­тив, 
# выводит сообщение о том, что такой пользователь в списке не найден.
# Это функция login, объявленная в модуле django.contrib.auth.views. 
# Поскольку она является полноценным контроллером, мы можем указать 
# ее вызов прямо в спи­ске привязок интернет-адресов. И сделать это 
# следует в модуле urls пакета проек­та - так мы создадим единую 
# подсистему разграничения доступа для всего сайта:

urlpatterns = [
    url(r'^login/', "django.contrib.auth.views.login", name="login"),
]
# Здесь мы привязали нашу функцию-контроллер к интернет-адресу 
# login. Мы зада­ли для нее имя привязки login - это имя мы 
# впоследствии используем в коде шаб­лонов. А имя самой 
# функции-контроллера мы заключили в кавычки, как и все име­на 
# функций-контроллеров в этом случае

# Функция-контроллер django.contrib.auth.views.login принимает 
# необязатель­ные именованные параметры, которые могут быть нам 
# полезны:
    template_name
    # Путь до шаблона, который будет использовать представление при 
    # авторизации пользователя. По умолчанию, registration/login.html.

    redirect_field_name
    # Имя GET поля, содержащего URL на который будет произведёно 
    # перенаправление после успешной авторизации. По умолчанию, next.

    authentication_form
    # Вызываемый объект (обычно, просто класс формы), использующийся 
    # для аутентификации. По умолчанию, AuthenticationForm.

    request.current_app
    # Подсказка, указывающая на приложение к которому принадлежит 
    # текущее представление. 

    extra_context
    # Словарь с контекстными данными, которые будут добавлены в 
    # текущий контекст, перед его передачей в шаблон.



# что делает представление django.contrib.auth.views.login:
    
    # При вызове через GET, оно отображает форму для аутентификации, 
    # которая отправляет введённые данные через POST на тот же URL.

    # При вызове через POST с аутентификационными данными пользователя, 
    # оно пытается авторизовать пользователя. При успешной авторизации, 
    # представление перенаправляет на URL, указанный в next. Если 
    # параметр next не был предоставлен, происходит перенаправление на 
    # URL, содержащийся в параметре конфигурации 
    # settings.LOGIN_REDIRECT_URL (по умолчанию, /accounts/profile/). 
    # При невозможности авторизации, представление снова показывает 
    # форму.


# Вашей обязанностью является предоставление HTML кода для шаблона, 
# который по умолчанию называется registration/login.html. Данный шаблон 
# принимает через контекст четыре переменных:

    form
    # Объект Form, который представляет AuthenticationForm.

    URL
    # на который будет осуществлено перенаправление после успешной 
    # авторизации. Можно также передавать строку запроса.

    site
    # Текущий Site, соответствующий параметру конфигурации SITE_ID. 
    # Если вы не активировали соответствующее приложение, переменной 
    # будет присвоен экземпляр RequestSite, который получает имя сайта 
    # и домен из текущего HttpRequest.

    site_name
    # Псевдоним для site.name. Если вы не активировали соответствующее 
    # приложение, переменной будет присвоено значение 
    # request.META['SERVER_NAME'].

# Если потребуется отказаться от вызова шаблона registration/login.html, 
# вы можете передать в представление параметр template_name через 
# дополнительные аргументы URL с вашей схеме. Например, эта строка URL 
# будет использовать шаблон myapp/login.html:

url(r'^login/$', auth_views.login, {'template_name': 'myapp/login.html'})

# Вы также можете указать имя для GET поля, которое будет содержать URL 
# для перенаправления после успешной авторизации пользователя, передав 
# его в аргументе redirect_field_name в представление. По умолчанию, next.

Вот пример:
{% if next %}
    {% if user.is_authenticated %}
    <p>Your account doesn't have access to this page. To proceed,
    please login with an account that has access.</p>
    {% else %}
    <p>Please login to see this page.</p>
    {% endif %}
{% endif %}

<form method="post" action="{% url 'django.contrib.auth.views.login' %}">
    {% csrf_token %}
    <table>
        {{ form.as_table }}
    </table>
    <input type="submit" value="login" />
    <input type="hidden" name="next" value="{{ next }}" />
</form>

{# Assumes you setup the password_reset view in your URLconf #}
<p><a href="{% url 'password_reset' %}">Lost password?</a></p>