# Комментарии ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

pip3 install django-contrib-comments

# Откроем модуль settings пакета проекта, где указываются его настройки. 
# Сразу же найдем переменную INSTALLED_APPS, в которой задается список 
# активных приложе­ний, и внесем в этот список приложения 'django_comments'

# максимальная длина комментария
COMMENT_MAX_LENGTH = 1024

# включение/выключение комментариев из списка по умолчанию выключины (True)
COMMENTS_HIDE_REWARDS = False

# включение/выключение удалённых комментариев из списка по умолчанию 
# не включать в список (True)
COMMENTS_HIDE_REMOVED = False
# если для этой переменной мы указали значение False, будет выводиться 
# сообщение вида «Комментарий удален» 

# Задав все необходимые настройки, выполним:
./manage.py migrate
# В результате Django создаст в базе все необходимые таблицы.

# Осталось лишь открыть модуль urls пакета проекта и вставить в список 
# привязок следующую строку:
urlpatterns = [
    ...
    url(r'^comments/', include('django_comments.urls')),
    ...
]

# Помимо данных, вводимых посетителем, в составе комментария также сохраняются
# некоторые служебные данные _; в частности, IР-адрес компьютера, с которого был
# добавлен комментарий, и дата и время его создания. Эти сведения обычно не выво­
# дятся на страницах сайта и требуются лишь модераторам - так, IР-адрес может при­
# годиться при отслеживании спамеров и интернет-хулиганов.

# Сначала нам нужно загрузить модуль coппnents шаблонизатора, обрабатывающий
# теги, что выводят содержимое комментариев и форму для их ввода. Для чего доста­
# точно вставить в код шаблона следующий тег:
{% load comments %}

# Чтобы вывести в нужном месте WеЬ-страницы стандартную форму добавления
# комментария, достаточно поместить в то место страницы, где она должна присут­
# ствовать, один-единственный тег render_coппnent_form:
{% render_comment_form for <объект> %}
# Здесь объект - это переменная контекста шаблона, где хранится объект, к 
# которо­му будут привязываться добавляемые комментарии (товар, статья блога и др.).

# Для вывода самого списка комментариев в стандартном формате служит другой
# тег - render_comment_list:
{% render_comment_list for <объект> %}
# Комментарии будут выведены в том месте страницы, где находится этот тег.

# Часто бывает полезным получить количество комментариев, привязанных к тому
# или иному объекту, чтобы потом вывести его на странице. Для этого применяется
# тег get_comment_count:
{% get_comment_count for <объект> as <переменная> %}



# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Управление выводом списка комментариев

# Чтобы получить список комментариев, мы воспользуемся тегом get_comment_list:
{% get_comment_list for <объект> as <переменная> %}
# Так мы получаем список комментариев


# Чтобы указать постоянную ссылку на конкретный комментарий, используйте 
# get_comment_permalink:
{% for comment in comment_list %}
    <a name="c{{ comment.id }}"></a>
    <a href="{% get_comment_permalink comment %}">
        permalink for comment #{{ forloop.counter }}
    </a>
    ...
{% endfor %}


# Каждый комментарий представляет собой объект класса Comment, объявленного
# в модуле django_comments.models.Comment. Класс Comment поддерживает несколько 
# свойств, позволяющих по­лучить сведения о комментарии:
    content_object
    # сущность, для которой был оставлен комментарий, фактически-запись 
    # соответствующей модели (например, товар или статья блога);
    content_type
    # тип этой сущности;
    object_pk
    # первичный ключ объекта, к которому добавлен комментарий.
    site
    # индентификатор сайта, на котором был отправлен комментарий.
    user_name
    # имя пользователя, оставившего комментарий;
    user_email
    # его адрес электронной почты;
    user_url
    # интернет-адрес его сайта;
    comment
    # собственно содержимое комментария;
    suЬmit_date
    # дaтa отправки комментария;
    is_removed
    # True, если комментарий был помечен модератором как удаленный;
    is_public
    # False, если комментарий находится в модерации; Если True, комментарий 
    # будет отображаться на сайте
    ip_address
    # IР-адрес, с которого был отправлен комментарий (пригодится для 
    # отслеживания спамеров ).

# Что касается свойства content _ type, то оно хранит объект класса ContentType, 
# опи­сывающий сущность-запись модели, для которой был оставлен комментарий.
# Этот класс поддерживает следующие свойства:
    model
    # имя класса модели, набранное строчными буквами;
    name
    # наименование модели, указанное в свойстве verbose_name вложенного 
    # класса Meta
{% if comment.content_type.model == "good" %}
    <р>Товар: {{ comment.content_object.name }}</р>
{% else %}
    <р>Статья блага: {{ comment.content_object.title }}</р>
{% endif %}


# если переменной СОММЕNТS_HIDE_REMOVED модуля settings пакета проекта было 
# присвоено значение тrue, комментарии, помеченные как уда­ленные, не будут 
# включаться в список комментариев. Но если мы задали для этой переменной 
# значение False, удаленные комментарии будут присутствовать в спи­ске. И 
# тогда нам придется проверять, не является ли такой комментарий удален­ным, 
# т.е. не хранит ли его свойство is_removed значение тrue.



# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Управление выводом формы для комментирования

