from django.forms import ModelForm

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

ModelForm
# Эrот объект и выполняет всю работу по получению данных из указанной 
# записи, выводу соответствующего интерфейса, проверке корректности 
# введенных данных и собственно добавлению, исправлению или удалению 
# записи - в зависимости от используемого класса­ контроллера.

# Класс ModelForrn берет из модели все сведения, необходимые для 
# создания формы и обработки введенных в нее данных. Они включают 
# перечень полей, их параметры (длина, критерий уникальности значения, 
# название, которое будет выводиться на экран в качестве надписи к 
# элементу управления, и пр.) и порядок их следования.

# Класс ModelForrn всегда привязывается к определенной модели, из которой 
# берет нужные для его работы сведения. Поэтому такие формы называют 
# связанными с моделями.

# Когда нам требуется всего лишь немного изменить поведение такой формы, 
# мы объявим в классе-потомке ModelForrn вложенный класс Meta и зададим 
# в нем нужные свойства.

# :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Свойства вложенного класса меtа класса формы, связанной с моделью

model 
# Модель, к которой будет привязана форма

fields 
# Список имен полей модели, которые должны присутствовать в форме. Если 
# не указан, форма включит все поля модели

exclude 
# Список имен полей модели, которые не должны присутствовать в форме. 
# Если указанное в этом списке поле также перечислено в списке, заданном 
# в свойстве fields, оно не будет присутствовать в форме

labels 
# Надписи для элементов управления в виде словаря, ключи элементов 
# которого должны совпадать с именами полей, а их значения зададут текст 
# надписей

help_texts 
# Задает текст дополнительного описания, которое будет выводиться под 
# соответствующим элементом управления

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Вот пример:

class GoodForm(ModelForm):
    class Meta:
        model = Good
        fields = ["name", "description", "in_stock"]
        labels = { "name": "Название", "description": "Описание", 
                    "in_stock": "Есть в наличии"}
        help_texts = {"name": "Должно быть уникальным"}
# Здесь мы создаем форму с элементами управления для ввода названия 
# товара, его описания и признака, есть ли товар в наличии. Как видим, 
# в этом случае посетитель не сможет указать категорию товара, 
# поскольку форма не включит в свой состав соответствующего поля модели.



# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Если же мы хотим более радикально изменить внешний вид и поведение 
# формы, связанной с моделью, мы можем указать список полей модели, 
# которые должны в ней присутствовать, и их параметры явно.

# Классы полей модели и соответствующие им классы полей формы

Класс поля модели               Класс поля формы
# BigintegerField               IntegerField
# BooleanField                  BooleanField
# CharField                     CharField
# DateTimeField                 DateTimeField
# DateField                     DateField
# EmailField                    EmailField
# FileField                     FileField
# FilePathField                 FilePathField
# FloatField                    FloatField
# ForeignKey                    ModelChoiceField
# GenericIPAcldressField        GenericIPAddressField
# ImageField                    ImageField
# IntegerField                  IntegerField
# IPAddressField                IPAddressField
# PositiveintegerField          IntegerField
# PositiveSmallintegerField     IntegerField
# SlugField                     SlugField
# SmallintegerField             IntegerField
# TextField                     CharField
# TimeField                     TimeField
# URLField                      URLField

# Помимо этого, мы можем использовать в формах класс поля ChoiceField. 
# Такое поле позволяет выбрать значение из списка указанных нами и 
# аналогично полю моделей с заданным параметром choices

# В конструкторах классов полей форм мы можем указывать необязательные 
# именованные параметры

# Параметры, поддерживаемые конструкторами классов полей форм, и классы 
# полей, для которь1х они применимы

  Параметр      : Описание                               : Класс полей формы
# ------------------------------------------------------------------------
# required      : Если тrue, то поле должно содержать    :  Все
#               : уникальное значение                    :
# --------------------------------------------------------
# label         : Текст надписи для соответствующего     :
#               : элемента управления                    :
# --------------------------------------------------------
# initial       : Изначальное значение для поля          :
# --------------------------------------------------------
# help_text     : Текст дополнительных сведений          :
# ------------------------------------------------------------------------
# min_length    : Минимальная длина вводимого значения   :  URLField
#               : в символах                             :  CharField,
#               :                                        :  Emai!Field
# --------------------------------------------------------
# max_length    : Максимальная длина вводимого значения  :
#               : в символах                             :
# ------------------------------------------------------------------------
# choices       : Список доступных для выбора значений.  :  ChoiceField
#               : Указывается в том же формате, что      :
#               : аналогичный список, задаваемый в       :
#               : параметре choices модели               :
# ------------------------------------------------------------------------
# input_formats : Список форматов указания значений,     :  DateField,
#               : которые может принимать поле. Задается :  DateTimeField,
#               : в виде списка, каждый элемент которого :  TimeField
#               : должен представлять собой строку с     :
#               : форматом. Для задания форматов         :
#               : применяются символы литералов, перед   :
#               : которыми в этом случае ставится символ :
#               : процента(%)                            :
# ------------------------------------------------------------------------
# min_value     : Минимальное значение для ввода         :  FloatField,
# --------------------------------------------------------  IntegerField
# max_value     : Максимальное значение для ввода        :
# ------------------------------------------------------------------------
# queryset      : Набор записей, из которого будут взяты :  ModelChoiceField
#               : записи для выбора                      :
# --------------------------------------------------------
# empty_label   : Текст, представляющий пустое поле.     :
#               : Если None, задать пустое значение для  :
#               : поля будет нельзя                      :
# ------------------------------------------------------------------------

# Все параметры, которые мы не указали, форма возьмет из связанной с ней 
# модели.

Вот примеры:

class GoodForm(forms.ModelForm):
    class Meta:
        model = Good
        name = forms.CharField(label="Название", help_text="Должно быть уникальным")
        description = forms.CharField(widget=forms.Textarea, label="Описание")
        category = forms.ModelChoiceField(queryset=Category.objects.all(), 
                    label="категория", empty_label=None)
        in_stock = forms.BooleanField(initial = True, label="Есть в наличии")
# Здесь мы создаем форму для ввода товаров. Для поля description указываем 
# в качестве выводимого элемента управления область редактирования

# Чтобы использовать форму, связанную с моделью, в потомках 
# классов-конт­роллеров высокого уровня CreateView и UpdateView достаточно 
# указать ее класс в свойстве form_class:
class GoodCreate(CreateView):
    form_class = GoodForm

