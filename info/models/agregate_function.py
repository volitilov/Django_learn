# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Агрегатные функции 

# Агрегатные функции Django позволяют выполнить какие-либо 
# математические операции над значениями указанного нами поля 
# всех записей списка. Мы можем подсчитать сумму значений 
# какого-либо поля, их арифметическое среднее и пр.


# ::::::::::::::::::::::::::::::::::::::::::
# Классы агрегатных функций

Count(<поле>, <только уникальные значения>) 
# Количество значений параметра поле (фактически количество 
# записей). Если необязательный параметр только уникальные 
# значения равен тrue, учитываются только уникальные значения 
# (значение по умолчанию - False)

Avg(<поле>) 
# Среднее арифметическое значений параметра поле

Sum(<поле>) 
# Сумма значений параметра поле

Мах(<поле>) 
# Максимальное из значений параметра поле

Мin(<поле>) 
# Минимальное из значений параметра поле

StdDev(<пoлe>, <отклонение выборки>) 
# Стандартное отклонение значений параметра поле. Если 
# необязательный параметр отклонение выборки равен True, 
# рассчитывается стандартное отклонение выборки (значение
# по умолчанию - False)

Variance(<поле>, <дисперсия выборки>) 
# Дисперсия значений параметра поле. Если необязательный 
# параметр отклонение выборки равен True, рассчитывается 
# дисперсия выборки (значение по умолчанию - False)



# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Good.objects.aggregate(models.Avg("price"), models.Min("price"))
avg_price = ad["price _ avg"]
min_price = ad["price_min"]
# Здесь мы получаем среднюю и минимальную цену товара.
