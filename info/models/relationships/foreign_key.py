# Подробнее
# https://djbook.ru/rel1.9/ref/models/fields.html#foreignkey

ForeignKey
# Связь многое-к-одному. В качестве единственного 
# обязательного параметра конструкто­ра такого поля мы укажем класс 
# первичной модели:

# Класс поля ForeignKey подцерживает очень полезный необязательный 
# параметр on_delete. Он позволит нам указать, что следует предпринять 
# используемой нами СУБД, если запись первичной таблицы, на которую 
# ссылаются записи вторичной таблицы, будет удалена.
# В качестве значения данного параметра указывается одна из переменных, 
# объяв­ленных в модуле django.dЬ.models. Таких переменных и соответствующих 
# им дос­тупных значений пять:
    on_delete
        CASCADE
        # также удалить связанные записи вторичной таблицы (значение пара­метра 
        # on_delete по умолчанию);

        PROTECT
        # не удалять запись первичной таблицы и сгенерировать исключение;

        SET_NULL
        # записать в соответствующее поле класса ForeignKey связанных запи­сей 
        # значение NULL;

        SET_DEFAULT
        # записать в соответствующее поле класса ForeignKey связанных записей 
        # указанное в его параметрах значение по умолчанию.

        SET()
        # Устанавливает ForeignKey в значение указанное в SET(). Если указан 
        # выполняемый объект, результат его выполнения.
        
        DO_NOTHING
        # Ничего не делать. Если используемый тип базы данных следит за 
        # целостностью связей, будет вызвано исключение IntegrityError, за 
        # исключением, когда вы самостоятельно добавите SQL правило 
        # ON DELETE для поля таблицы.

    limit_choices_to
    # Ограничивает доступные значения для поля при создании ModelForm или в 
    # админке (по умолчанию можно выбрать любой объект связанной модели). 
    # Можно передать словарь, объект Q или функцию, которая возвращает 
    # словарь или объект Q.

    related_name
    # Название, используемое для обратной связи от связанной модели. Также 
    # значение по умолчанию для related_query_name (название обратной связи 
    # используемое при фильтрации результата запроса). 

    related_query_name
    # Название обратной связи используемое при фильтрации результата запроса. 
    # По умолчанию используется related_name, или название модели

    to_field
    # Поле связанной модели, которое используется для создания связи между 
    # таблицами. По-умолчанию, Django использует первичный ключ.

    db_constraint
    # Указывает создавать ли “constraint” для внешнего ключа в базе данных. 
    # По умолчанию True и в большинстве случает это то, что вам нужно. 
    # Указав False вы рискуете целостностью данных. Некоторые ситуации, 
    # когда вам может быть это необходимо:
        # Вам досталась в наследство нецелостная база данных
        # Вы используете шардинг базы данных.

    swappable
    # Управляет поведением миграций, если ForeignKey ссылается на 
    # подменяемую(swappable) модель. При True - значение по умолчанию - 
    # если ForeignKey ссылается на модель, указанную через 
    # settings.AUTH_USER_MODEL (или другую настройку, определяющую 
    # какую модель использовать), связь в миграции будет использовать 
    # настройку, а не саму модель.
    # Вам может понадобится значение False только, если связь должна указывать 
    # на какую-то конкретную модель, игнорируя настройку - например, если это 
    # модель профиля пользователя для какой-то конкретной модели пользователя 
    # и не будет работать с любой моделью из настройки.

# Значения CASCADE и PROTECT пригодятся нам, если мы создаем так называемую 
# же­сткую связь, при которой любая запись вторичной таблицы обязательно должна 
# ссылаться на запись первичной. А значения SET NULL и SET_DEFAULT помогут нам
# создать мягкую связь, когда запись вторичной таблицы может ссылаться на запись 
# первичной, а может и не ссылаться.

# Создаем мягкую связь:
category = models.ForeignKey(Category, null=True, blank=True, on_delete=SET_NULL)
