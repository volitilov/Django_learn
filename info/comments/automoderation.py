# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Создание автомодератора

# Автомодератор- это особый класс, являющийся потомком класса CommentModerator
# из модуля django_comments.moderation и привязываемый к модели, записи
# которой будут комментироваться. Объявляется этот класс в модуле models 
# прило­жения - там же, где и модели.

# Класс commentModerator поддерживает несколько свойств, которые определяют
# параметры автоматического модерирования комментариев.

# Свойства класса CommentModerator ::::::::::::::::::::::::::::::::::::

enable_field 
# Задает имя поля модели, принадлежащего типу BooleanField.
# Если это поле хранит значение False, комментирование данной
# записи будет запрещено. Значение по умолчанию - None

email_notification 
# Если тrue, то при добавлении нового комментария всем пользо-
# вателям, перечисленным в особом списке, будет отправлено по электронной 
# почте соответствующее уведомление. Значение по умолчанию - False

auto_close_field 
# Задает имя поля модели, принадлежащего типу DateField или
# DateTimeField. По прошествии количества дней, указанного
# в свойстве close_after, после даты, хранящейся в этом поле,
# комментирование данной записи будет запрещено. Значение
# по умолчанию - None

close_after 
# Задает количество дней, по прошествии которых комментирова-
# ние будет запрещено. Значение по умолчанию - None

auto_moderate_field
# Задает имя поля модели, принадлежащего типу DateField или
# DateTimeField. По прошествии количества дней, указанного
# в свdйстве moderate _ after, после даты, хранящейся в этом поле,
# все вновь добавленные к данной записи комментарии будут
# делаться скрытыми. Значение по умолчанию - None

moderate_after 
# Задает количество дней, по прошествии которых все вновь
# добавленные комментарии будут помечаться как скрытые. Если
# указано значение О, все комментарии будут скрываться сразу же
# после добавления. Значение по умолчанию - None


class Blog(models.Model):
    title = models.CharField(maxlength=250)
    body = models.TextField()
    pub_date = models.DateField()
    enable_comments = models.BooleanField()
# Здесь мы создаем модель Blog, в которую будут записываться статьи блага. В поле
# pub_date будет храниться дата публикации статьи - мы указали, что значение в это
# поле станет заноситься автоматически при создании новой записи. А в поле
# еnаble_comments будет храниться признак того, разрешены ли для статьи 
# коммента­рии, значение по умолчанию этого поля - тrue.

from django_comments.moderation import CommentModerator, moderator

class BlogModerator(CommentModerator):
    email_notification = True
    enable_field = 'enable_comments'
    auto_moderate_field = 'pub_date'
    moderate_after = 30
# А здесь создаем автомодератор для модели Blog. Активизируем автоматическую
# рассылку уведомлений о вновь добавленных комментариях, задаем возможность
# запрета комментирования и указываем, что все комментарии, добавленные спустя
# 30 дней после создания статьи, должны изначально делаться скрытыми.

# После объявления класса автомодератора его следует привязать к модели. Для это­
# го мы вызовем не возвращающий результата метод register класса moderator, объ­
# явленного в том же модуле django_comments.moderation. Первым парамет­
# ром этому методу передадим класс модели, а вторым - класс автомодератора, 
# ко­торый к ней привязывается:
moderator.register(Blog, BlogModerator)